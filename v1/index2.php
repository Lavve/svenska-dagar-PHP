<?phpdate_default_timezone_set('Europe/Stockholm');if (isset($_GET['datum']))	{	$datum = $_GET['datum'];	}	elseif (isset($_POST['datum']))	{	$datum = $_POST['datum'];	}	else	{		$datum= date("Ymd");	}if (isset($_GET['offset']))	{	$offset = $_GET['offset'];	}	elseif (isset($_POST['offset']))	{	$offset = $_POST['offset'];	}	else	{		$offset= 0;	}$year = substr($datum,0,4);$month = substr($datum,4,2);$day = substr($datum,6,2);$unixdate = mktime(0,0,0,$month,$day,$year);if (date("Ymd",$unixdate) != $datum)	{		header('Status: 400 Bad Request', true, 400);		echo "Felaktigt datum";		break;	}	if ($year < 1989) 	{		header('Status: 400 Bad Request', true, 400);		echo "Felaktigt datum. Endast datum efter 1989-01-01";		break;	}	$unixdate = mktime(0,0,0,$month,$day+$offset,$year);$year = (date("Y",$unixdate));$month = (date("m",$unixdate));$day = (date("d",$unixdate)); $easterDate  = easter_date($year); 	$easterDay   = date('j', $easterDate); 	$easterMonth = date('n', $easterDate); 	$easterYear   = date('Y', $easterDate);//hitta midsommar$trymidsommar = mktime(0,0,0,6,19,$year);while ($trymidsommar <= mktime(0,0,0,6,25,$year))	{	if (date("N",$trymidsommar)==5)		{			$midsommar = $trymidsommar;			$midsommardagen = strtotime(date("Y-m-d", $trymidsommar) . " +1 day");			break;		}	$trymidsommar = strtotime(date("Y-m-d", $trymidsommar) . " +1 day");		}//hitta allhelgona$tryallhelgona = mktime(0,0,0,10,31,$year);while ($tryallhelgona <= mktime(0,0,0,11,6,$year))	{	if (date("N",$tryallhelgona)==6)		{			$allhelgona = $tryallhelgona;			$allhelgonaafton = strtotime(date("Y-m-d", $tryallhelgona) . " -1 day");			break;		}	$tryallhelgona = strtotime(date("Y-m-d", $tryallhelgona) . " +1 day");		}$holidays = array(	mktime(0,0,0,1,1,$year) => "Nyårsdagen",	mktime(0,0,0,1,6,$year) => "Trettondedagjul",	mktime(0,0,0,$easterMonth,$easterDay-3,$year) =>  "Skärtorsdagen",	mktime(0,0,0,$easterMonth,$easterDay-2,$year) => "Långfredagen",	mktime(0,0,0,$easterMonth,$easterDay-1,$year) => "Påskafton",	mktime(0,0,0,$easterMonth,$easterDay,$year) => "Påskdagen",	mktime(0,0,0,$easterMonth,$easterDay+1,$year) =>  "Annandag påsk",	mktime(0,0,0,4,30,$year) => "Valborgsmässoafton",	mktime(0,0,0,5,1,$year) => "Första Maj",	mktime(0,0,0,$easterMonth,$easterDay+4+(7*5),$year) => "Kristi Himmelsfärdsdag",	mktime(0,0,0,6,6,$year) => "Sveriges Nationaldag",	mktime(0,0,0,$easterMonth,$easterDay+(7*7)-1,$year) => "Pingstafton",	mktime(0,0,0,$easterMonth,$easterDay+(7*7),$year) => "Pingstdagen",	$midsommar => "Midsommarafton",	$midsommardagen => "Midsommardagen",	$allhelgonaafton => "Allhelgonaafton",	$allhelgona => "Alla helgons dag",	mktime(0,0,0,12,24,$year) => "Julafton",	mktime(0,0,0,12,25,$year) => "Juldagen",	mktime(0,0,0,12,26,$year) => "Annandag jul",	mktime(0,0,0,12,31,$year) => "Nyårsafton",	);//Utdata$output['datum'] = date("Y-m-d", $unixdate);$output['unixdatum'] = $unixdate;$output['dag'] = veckodag(date("l",$unixdate));$output['veckodag'] = date("N",$unixdate);$output['vecka'] = date("W",$unixdate);if (isset($holidays[$unixdate]))	{	$output['helgdag'] = $holidays[$unixdate];	}	header("Access-Control-Allow-Origin: *");echo json_encode($output);function veckodag($dag){	$days = array(		"Monday" => "Måndag", 		"Tuesday" => "Tisdag",		"Wednesday" => "Onsdag",		"Thursday" => "Torsdag",		"Friday" => "Fredag",		"Saturday" => "Lördag",		"Sunday" => "Söndag",	);		return $days[$dag];}?>